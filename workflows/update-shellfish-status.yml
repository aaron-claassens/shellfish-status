name: Update Shellfish Status JSON

# Run every 15 minutes
on:
  workflow_dispatch:
  schedule:
    - cron: '*/15 * * * *'

jobs:
  build-and-commit:
    runs-on: ubuntu-latest

    steps:
    # 1. Check out the repo
    - name: Check out repo
      uses: actions/checkout@v3
      with:
        # We need write permissions so we can commit
        token: ${{ secrets.GITHUB_TOKEN }}

    # 2. Set up Python
    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # 3. Install dependencies (requests + beautifulsoup4)
    - name: Install scraping dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    # 4. Scrape the page & write status.json
    - name: Scrape NSW Shellfish Status and write status.json
      run: |
        python - << 'PYCODE'
import requests
from bs4 import BeautifulSoup
import json
import os
import datetime

# 1) Fetch the live NSW page:
URL = "https://www.foodauthority.nsw.gov.au/industry/shellfish/status"
resp = requests.get(URL, timeout=15)
resp.raise_for_status()
html = resp.text

# 2) Parse with BeautifulSoup:
soup = BeautifulSoup(html, "html.parser")

# 3) Find all "Closed"/"Open" statuses inside <div class="sqap-card__status">
status_divs = soup.select(".sqap-card__status .field__item")
open_count = 0
closed_count = 0

for div in status_divs:
    txt = div.get_text(strip=True).lower()
    if txt == "open":
        open_count += 1
    elif txt == "closed":
        closed_count += 1

# 4) Build a dict and write to status.json
data = {
    "open": open_count,
    "closed": closed_count,
    # also include a timestamp, in case you want to display it
    "last_updated": datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
}

# Path to write: in the repo root, file status.json
out_path = os.path.join(os.getcwd(), "status.json")
with open(out_path, "w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

print(f"Wrote status.json: open={open_count}, closed={closed_count}")
PYCODE

    # 5. Commit & push status.json back to repository
    - name: Commit status.json
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add status.json
        # Only commit if there are changes
        if ! git diff --cached --quiet; then
          git commit -m "Automated update of shellfish status (every 15 min)"
          git push
        else
          echo "No changes to status.json; skipping commit."
        fi
      env:
        # GITHUB_TOKEN is provided automatically by GitHub Actions
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
